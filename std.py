import numpy as np

linear_std=[]
poly_std=[]
rbf_std=[]
KNN_std=[]
tree_std=[]
forest_std=[]
LogisticRegression_std=[]
Xgboost_std=[]
Transformer_std=[]

linear_mean=[]
poly_mean=[]
rbf_mean=[]
KNN_mean=[]
tree_mean=[]
forest_mean=[]
LogisticRegression_mean=[]
Xgboost_mean=[]
Transformer_mean=[]

# MNIST
linear_svc_acc =[[0.495, 0.56, 0.475, 0.445, 0.555], [0.495, 0.6, 0.56, 0.52, 0.505], [0.56, 0.68, 0.525, 0.55, 0.515], [0.555, 0.58, 0.575, 0.54, 0.625], [0.565, 0.59, 0.535, 0.505, 0.555], [0.565, 0.595, 0.505, 0.46, 0.65], [0.59, 0.645, 0.565, 0.625, 0.63], [0.6, 0.66, 0.695, 0.545, 0.665], [0.6, 0.6, 0.65, 0.575, 0.67], [0.62, 0.585, 0.62, 0.605, 0.675], [0.635, 0.64, 0.685, 0.585, 0.675], [0.655, 0.655, 0.715, 0.58, 0.665], [0.64, 0.61, 0.675, 0.59, 0.605], [0.675, 0.605, 0.67, 0.58, 0.68], [0.675, 0.625, 0.665, 0.6, 0.63], [0.69, 0.64, 0.67, 0.59, 0.665], [0.69, 0.655, 0.715, 0.595, 0.645], [0.675, 0.645, 0.75, 0.6, 0.685], [0.675, 0.645, 0.75, 0.63, 0.69], [0.675, 0.66, 0.735, 0.635, 0.69]]
poly_svc_acc =[[0.435, 0.47, 0.56, 0.485, 0.56], [0.495, 0.595, 0.655, 0.48, 0.515], [0.56, 0.68, 0.635, 0.485, 0.515], [0.56,0.57, 0.575, 0.54, 0.625], [0.57, 0.595, 0.535, 0.525, 0.535], [0.495, 0.62, 0.515, 0.51, 0.65], [0.56, 0.645, 0.625, 0.625, 0.54], [0.595, 0.66, 0.625, 0.52, 0.61], [0.6, 0.6, 0.54, 0.575, 0.64], [0.625, 0.64, 0.535, 0.585, 0.615], [0.635, 0.645, 0.685, 0.585, 0.675], [0.67, 0.665, 0.715, 0.58, 0.665], [0.625, 0.61, 0.675, 0.6, 0.605], [0.63, 0.65, 0.67, 0.605, 0.74], [0.575, 0.625, 0.665, 0.6, 0.71], [0.61, 0.625, 0.67, 0.59, 0.665], [0.665, 0.64, 0.715, 0.595, 0.72], [0.69, 0.66, 0.715, 0.6, 0.685], [0.66, 0.645, 0.75, 0.63, 0.69], [0.625, 0.66, 0.755, 0.665, 0.75]]
rbf_svc_acc =[[0.495, 0.485, 0.465, 0.455, 0.555], [0.47, 0.54, 0.705, 0.54, 0.58], [0.445, 0.64, 0.7, 0.605, 0.555], [0.5, 0.67, 0.65, 0.55, 0.6], [0.525, 0.655, 0.695, 0.62, 0.585], [0.59, 0.57, 0.705, 0.665, 0.56], [0.615, 0.715, 0.77, 0.68, 0.57], [0.605, 0.665, 0.735, 0.68, 0.645], [0.625, 0.65, 0.775, 0.655, 0.655], [0.7, 0.595, 0.8, 0.675, 0.665], [0.7, 0.715, 0.79, 0.69, 0.73], [0.675, 0.695, 0.795, 0.655, 0.755], [0.73, 0.71, 0.805, 0.66, 0.715], [0.72, 0.69, 0.795, 0.67, 0.75], [0.7, 0.72,0.765, 0.68, 0.75], [0.735, 0.75, 0.795, 0.72, 0.71], [0.71, 0.75, 0.795, 0.71, 0.74], [0.73, 0.725, 0.78, 0.72, 0.71], [0.715, 0.745, 0.81, 0.72, 0.715], [0.715, 0.755, 0.81, 0.725, 0.75]]
KNN_acc =[[0.495, 0.5, 0.46, 0.48, 0.58], [0.47, 0.54, 0.485, 0.505, 0.57], [0.475, 0.595, 0.52, 0.525, 0.49], [0.495, 0.6, 0.485, 0.59, 0.56], [0.505, 0.565, 0.485, 0.53, 0.61], [0.56, 0.525, 0.54, 0.54, 0.625], [0.57, 0.55, 0.565, 0.6, 0.515], [0.585, 0.59, 0.65, 0.6, 0.615], [0.54, 0.585, 0.635, 0.595, 0.685], [0.585, 0.61, 0.66, 0.59, 0.675], [0.555, 0.61, 0.675, 0.615, 0.675], [0.59, 0.61, 0.645, 0.645, 0.67], [0.575, 0.615, 0.665, 0.61, 0.635], [0.625, 0.575, 0.68, 0.635, 0.62], [0.64, 0.615, 0.67, 0.615, 0.63], [0.615, 0.635, 0.69, 0.615, 0.63], [0.625, 0.625, 0.72, 0.62, 0.645], [0.655, 0.635, 0.705, 0.635, 0.7], [0.675, 0.72, 0.715, 0.63, 0.675], [0.675, 0.72, 0.74, 0.675, 0.67]]
tree_acc =[[0.49, 0.525, 0.485, 0.46, 0.56], [0.445, 0.545, 0.61, 0.52, 0.565], [0.475, 0.565, 0.455, 0.54, 0.525], [0.515, 0.67, 0.575, 0.59, 0.59], [0.555, 0.655, 0.59, 0.54, 0.62], [0.49, 0.645, 0.635, 0.56, 0.645], [0.615, 0.625, 0.685, 0.575, 0.655], [0.485, 0.625, 0.67, 0.585, 0.64], [0.58, 0.62, 0.665, 0.62, 0.655], [0.56, 0.59, 0.685, 0.575, 0.65], [0.575, 0.66, 0.66,0.595, 0.59], [0.63, 0.625, 0.69, 0.685, 0.645], [0.625, 0.685, 0.655, 0.665, 0.63], [0.62, 0.675, 0.67, 0.595, 0.625], [0.645, 0.62, 0.68, 0.655, 0.64], [0.655, 0.635, 0.685, 0.66, 0.67], [0.63, 0.675, 0.665, 0.72, 0.645], [0.615, 0.68, 0.67, 0.68, 0.65], [0.645, 0.625, 0.7, 0.68, 0.68], [0.62, 0.7, 0.65, 0.65, 0.655]]
forest_acc =[[0.485, 0.525, 0.52, 0.44, 0.63], [0.445, 0.59, 0.63, 0.52, 0.585], [0.485, 0.565, 0.585, 0.595, 0.57], [0.495, 0.6, 0.615, 0.595, 0.65], [0.495, 0.625, 0.63, 0.605, 0.675], [0.525, 0.655, 0.67, 0.655, 0.675], [0.57, 0.655, 0.745, 0.665, 0.69], [0.615, 0.65, 0.74, 0.625, 0.69], [0.64, 0.66, 0.745, 0.615, 0.685], [0.625, 0.705, 0.74, 0.635, 0.7], [0.57, 0.715, 0.77, 0.635, 0.725], [0.675, 0.71, 0.785, 0.65, 0.76], [0.655, 0.725, 0.74, 0.69, 0.73], [0.725, 0.695, 0.78, 0.71, 0.74], [0.705, 0.735, 0.76, 0.745, 0.755], [0.71, 0.745, 0.78, 0.715, 0.755], [0.705, 0.73, 0.775, 0.695, 0.745], [0.695, 0.765, 0.765, 0.7, 0.755], [0.7, 0.76, 0.8, 0.7, 0.77], [0.71, 0.75, 0.805, 0.71, 0.77]]
LogisticRegression_acc =[[0.47, 0.565, 0.485, 0.46, 0.605], [0.445, 0.595, 0.6, 0.51, 0.54], [0.55, 0.555, 0.575, 0.555, 0.56], [0.57, 0.575, 0.585, 0.595, 0.56], [0.605, 0.635, 0.535, 0.615, 0.595], [0.57, 0.63, 0.57, 0.59, 0.62], [0.625, 0.65, 0.635,0.625, 0.625], [0.595, 0.63, 0.66, 0.615, 0.62], [0.61, 0.575, 0.625, 0.61, 0.63], [0.66, 0.59, 0.62, 0.63, 0.64], [0.655, 0.635, 0.67, 0.63, 0.66], [0.67, 0.635, 0.705, 0.625, 0.68], [0.655, 0.64, 0.71, 0.63, 0.68], [0.665, 0.645, 0.73, 0.615, 0.685], [0.69, 0.645, 0.725, 0.615, 0.69], [0.695, 0.64, 0.715, 0.625, 0.69], [0.685, 0.635, 0.715, 0.63, 0.685], [0.705, 0.64, 0.735, 0.635, 0.69], [0.705, 0.655, 0.74, 0.63, 0.71], [0.7, 0.635, 0.72, 0.615, 0.705]]
Xgboost_acc =[[0.495, 0.48, 0.51, 0.46, 0.555], [0.495, 0.52, 0.51, 0.54, 0.555], [0.435, 0.655, 0.56, 0.64, 0.57], [0.485, 0.645, 0.545, 0.63, 0.605], [0.47, 0.645, 0.565, 0.65, 0.645], [0.505, 0.65, 0.71, 0.575, 0.645], [0.54, 0.66, 0.68, 0.68, 0.68], [0.63, 0.655, 0.725, 0.65, 0.695], [0.605, 0.645, 0.71, 0.66, 0.725], [0.65, 0.685, 0.725, 0.67, 0.715], [0.615, 0.725, 0.745, 0.665, 0.74], [0.695, 0.665, 0.785, 0.66, 0.745], [0.685, 0.685, 0.75, 0.68, 0.725], [0.705, 0.675, 0.755, 0.72, 0.745], [0.69, 0.7, 0.8, 0.71, 0.77], [0.7, 0.71, 0.765, 0.725, 0.74], [0.71, 0.745, 0.78, 0.715, 0.765], [0.71, 0.72, 0.77, 0.695, 0.74], [0.68, 0.72, 0.8, 0.715, 0.75], [0.685, 0.71, 0.8, 0.74, 0.755]]
Transformer_acc =[[0.46, 0.57, 0.555, 0.435, 0.605], [0.505, 0.555, 0.555, 0.51, 0.575], [0.53, 0.62, 0.54, 0.52, 0.545], [0.5, 0.575, 0.545, 0.58, 0.575], [0.535, 0.595, 0.605, 0.56, 0.605], [0.525, 0.6, 0.565, 0.525, 0.605], [0.55, 0.65, 0.635, 0.605, 0.6], [0.56, 0.71, 0.63, 0.55, 0.605], [0.58, 0.565, 0.61, 0.58, 0.65], [0.58, 0.64, 0.535, 0.57, 0.665], [0.555, 0.655, 0.61, 0.55, 0.775], [0.655, 0.64, 0.62, 0.61, 0.735], [0.68, 0.685, 0.77, 0.68, 0.68], [0.705, 0.63, 0.745, 0.685, 0.725], [0.66,0.69, 0.765, 0.59, 0.76], [0.655, 0.715, 0.745, 0.69, 0.645], [0.645, 0.705, 0.68, 0.705, 0.63], [0.68, 0.72, 0.735, 0.705, 0.775], [0.65, 0.63, 0.685, 0.585, 0.76], [0.645, 0.715, 0.765, 0.64, 0.725]]


for i in range(20):
        linear_std.append(round(np.std(linear_svc_acc[i]),4))
        poly_std.append(round(np.std(poly_svc_acc[i]),4))
        rbf_std.append(round(np.std(rbf_svc_acc[i]),4))
        KNN_std.append(round(np.std(KNN_acc[i]),4))
        tree_std.append(round(np.std(tree_acc[i]),4))
        forest_std.append(round(np.std(forest_acc[i]),4))
        LogisticRegression_std.append(round(np.std(LogisticRegression_acc[i]),4))
        Xgboost_std.append(round(np.std(Xgboost_acc[i]),4))
        Transformer_std.append(round(np.std(Transformer_acc[i]),4))

        linear_mean.append(round(np.mean(linear_svc_acc[i]),4))
        poly_mean.append(round(np.mean(poly_svc_acc[i]),4))
        rbf_mean.append(round(np.mean(rbf_svc_acc[i]),4))
        KNN_mean.append(round(np.mean(KNN_acc[i]),4))
        tree_mean.append(round(np.mean(tree_acc[i]),4))
        forest_mean.append(round(np.mean(forest_acc[i]),4))
        LogisticRegression_mean.append(round(np.mean(LogisticRegression_acc[i]),4))
        Xgboost_mean.append(round(np.mean(Xgboost_acc[i]),4))
        Transformer_mean.append(round(np.mean(Transformer_acc[i]),4))

print("linear_std", linear_std)
print("poly_std", poly_std)
print("rbf_std", rbf_std)
print("KNN_std", KNN_std)
print("tree_std", tree_std)
print("forest_std", forest_std)
print("LogisticRegression_std", LogisticRegression_std)
print("Xgboost_std", Xgboost_std)
print("Transformer_std", Transformer_std)

print("linear_mean", linear_mean)
print("poly_mean", poly_mean)
print("rbf_mean", rbf_mean)
print("KNN_mean", KNN_mean)
print("tree_mean", tree_mean)
print("forest_mean", forest_mean)
print("LogisticRegression_mean", LogisticRegression_mean)
print("Xgboost_mean", Xgboost_mean)
print("Transformer_mean", Transformer_mean)